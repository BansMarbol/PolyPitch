{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf350
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red0\green115\blue0;}
\deftab560
\pard\pardeftab560\ql\qnatural

\f0\fs18 \cf2 //live analysis of frequency track data\cf0 \
\
b= \cf3 Buffer\cf0 .read(s,\cf4 "/data/audio/mirdata/scmirtests/pianotest.wav"\cf0 ); \
\
b= \cf3 Buffer\cf0 .read(s,\cf4 "/data/audio/mirdata/scmirtests/pixiesivebeentired.wav"\cf0 ); \
\
b= \cf3 Buffer\cf0 .read(s,\cf4 "/data/audio/mirdata/scmirtests/Everybody Loves Somebody.wav"\cf0 ); \
\
\
\
(\
\cf3 SynthDef\cf0 (\cf5 \\pptest1\cf0 ,\{\cf3 arg\cf0  amp=0.1, freq=440, dur=0.1; \
\
\cf3 var\cf0  env, sound; \
\
env = \cf3 EnvGen\cf0 .ar(\cf3 Env\cf0 ([0,1,1,0],[0.01,dur,0.01]),doneAction:2); \
\
sound = \cf3 LFCub\cf0 .ar(freq+(\cf3 LFNoise1\cf0 .kr(\cf3 Rand\cf0 (5,7.5),\cf3 Line\cf0 .kr(0.0,\cf3 Rand\cf0 (2.0,5.0),dur)))); \
\
\cf3 Out\cf0 .ar(0,\cf3 Pan2\cf0 .ar(sound*env*amp,0.0));\
\
\}).add;\
\
\cf3 SynthDef\cf0 (\cf5 \\pptest2\cf0 ,\{\cf3 arg\cf0  amp=0.1, freq=440, dur=0.1; \
\
\cf3 var\cf0  env, sound; \
\
env = \cf3 EnvGen\cf0 .ar(\cf3 Env\cf0 ([0,1,1,0],[0.01,dur,0.01]),doneAction:2); \
\
sound = \cf3 LFSaw\cf0 .ar(freq+(\cf3 LFNoise1\cf0 .kr(\cf3 Rand\cf0 (5,7.5),\cf3 Line\cf0 .kr(0.0,\cf3 Rand\cf0 (2.0,5.0),dur)))); \
\
\cf3 Out\cf0 .ar(0,\cf3 Pan2\cf0 .ar(sound*env*amp,0.5));\
\
\}).add\
)\
\
\cf3 Synth\cf0 (\cf5 \\pptest1\cf0 ,[\cf5 \\amp\cf0 , 0.1, \cf5 \\freq\cf0 , 440, \cf5 \\dur\cf0 , 0.5])\
\
\
\cf2 //better for piano polyphony\cf0 \
(\
\{\
\
\cf3 var\cf0  in, tracked;\
\
\cf2 //in= SoundIn.ar; \cf0 \
in = \cf3 PlayBuf\cf0 .ar(1,b,loop:1); \
\
tracked=\cf3 PolyPitch\cf0 .kr(in,5,-0.1,4.0,cancellationweight:0.5); \cf2 //0.0000001,0.5,0.9\cf0 \
\
\cf3 SendReply\cf0 .kr(\cf3 Impulse\cf0 .kr(44100/2048),\cf5 'polyparam'\cf0 ,tracked); \
\
\cf3 Out\cf0 .ar(0,in); \
\
\}.play\
)\
\
\
\cf2 //better for complex polyphonic audio with background drums?\cf0 \
(\
\{\
\
\cf3 var\cf0  in, tracked;\
\
\cf2 //in= SoundIn.ar; \cf0 \
in = \cf3 PlayBuf\cf0 .ar(1,b,loop:1); \
\
tracked=\cf3 PolyPitch\cf0 .kr(in,10,-0.1,10.0,cancellationweight:1.0); \cf2 //0.0000001,0.5,0.9\cf0 \
\
\cf3 SendReply\cf0 .kr(\cf3 Impulse\cf0 .kr(44100/2048),\cf5 'polyparam'\cf0 ,tracked); \
\
\cf3 Out\cf0 .ar(0,in); \
\
\}.play\
)\
\
\
\
\pard\pardeftab720\ql\qnatural
\cf0 \
\pard\pardeftab560\ql\qnatural
\cf0 (\
\pard\pardeftab560\ql\qnatural
\cf3 var\cf0  maxvoices = 10;\
\cf3 var\cf0  activevoices = \cf3 List\cf0 []; \
\cf3 var\cf0  prevnotes = 0.0!maxvoices; \
\cf3 var\cf0  threshold = 0.3; \cf2 //1/5 of a semitone resolution to say frequency is the 'same'. Vibrato can still cause a confound, though unlikely to move too far (some singers might show 1 ST deviation at 7 Hz for example, versus 20Hz sampling rate of PolyPitch, though vibrato is smeared by the FFTs)\cf0 \
\cf3 var\cf0  threshold2 = 0.4; \cf2 //account for wider vibrato over longer term\cf0 \
\
o.remove; \
\
o = \cf3 OSCresponder\cf0 (\cf3 nil\cf0 , \cf5 'polyparam'\cf0 , \{ \cf3 |t, r, msg|\cf0  \
	\
	\cf3 var\cf0  numvoices = msg[3]; \
	\cf3 var\cf0  newnotes = \cf3 List\cf0 []; \
	\
	numvoices.do\{\cf3 |i|\cf0  \
		\cf3 var\cf0  indexnow = 4+(i*2);\
		\cf3 var\cf0  note = msg[indexnow].cpsmidi; \
		\cf3 var\cf0  salience = msg[indexnow+1]; \cf2 //will be used for strength of trails\cf0 \
	\
		\cf2 //[note,salience].postln;\cf0 \
	\
		\cf3 Synth\cf0 (\cf5 \\pptest1\cf0 ,[\cf5 \\amp\cf0 , (0.3*salience).min(0.1), \cf5 \\freq\cf0 , 2.0*msg[indexnow], \cf5 \\dur\cf0 , 0.1]);\
	\
		block \{\cf3 |break|\cf0 \
		\
		prevnotes.do\{\cf3 |notethen|\cf0  \
			\
			\cf2 //octave errors mess this up, can hear some in general response that are picking up pitch content that \cf0 \
			\cf2 //isn't octave consistent frame to frame\cf0 \
			\
			\cf3 var\cf0  diff = abs(note-notethen); \
			\cf2 //var voicealready= false; \cf0 \
			\
			if(diff<threshold) \{\
				\
				\cf2 //create active voice if not one close already; else add to salience of active voice match\cf0 \
				\
				activevoices.do\{\cf3 |voice|\cf0 \
					\cf3 var\cf0  voicenote = voice[0]; \
					\cf3 var\cf0  voicediff = abs(note-voicenote); 			\
					\
					if(voicediff<threshold2) \{\
					\
						voice[1] = voice[1] + salience; \
						\
						break.value; \
					\}\
					\
				\};  \
				\
				\cf2 //if got to here, no existing matching voice\cf0 \
				\
				\cf2 //third param is the survival frames counter\cf0 \
				activevoices.add([note, salience,0] ); \
				\
				break.value; \
			\}; \
			\
			\}; \
		\
		\};\
		\
		newnotes.add(note); \
	\}; \
	\
	\cf2 //update active voices, kill off the weak, reduce all ratings\cf0 \
	activevoices.do \{\cf3 |voice|\cf0    voice[1] = voice[1] * 0.8; voice[2] = voice[2]+1;  \
		if(voice[2]==1,\{\cf3 Synth\cf0 (\cf5 \\pptest2\cf0 ,[\cf5 \\amp\cf0 , 0.02, \cf5 \\freq\cf0 , voice[0].midicps, \cf5 \\dur\cf0 , 0.2+(0.5*(voice[1].min(1.0)))])\}) \
	\}; \
	\
	activevoices = activevoices.select \{\cf3 |voice|\cf0    voice[1] > 0.25 \}; \
	\
	activevoices.postln;\
	\
	prevnotes = newnotes; \
	\
\}).add;\
\
)\
\
\
}